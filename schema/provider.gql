"""
A Provider extends Crossplane with support for new managed resources.
"""
type Provider implements Node & KubernetesResource {
  "An opaque identifier that is unique across all types."
  id: ID!

  "The underlying Kubernetes API version of this resource."
  apiVersion: String!

  "The underlying Kubernetes API kind of this resource."
  kind: String!

  "Metadata that is common to all Kubernetes API resources."
  metadata: ObjectMeta!

  "The desired state of this resource."
  spec: ProviderSpec!

  "The observed state of this resource."
  status: ProviderStatus

  "An unstructured JSON representation of the underlying Kubernetes resource."
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )

  "Events pertaining to this resource."
  events: EventConnection! @goField(forceResolver: true)

  "Revisions of this provider."
  revisions: ProviderRevisionConnection! @goField(forceResolver: true)

  "The active revision of this provider."
  activeRevision: ProviderRevision @goField(forceResolver: true)
}

"""
A ProviderRevisionConnection represents a connection to provider revisions.
"""
type ProviderRevisionConnection {
  "Connected nodes."
  nodes: [ProviderRevision!]

  "The total number of connected nodes."
  totalCount: Int!
}

# TODO(negz): Include packagePullSecrets? It seems idiomatic to resolve an array
# of actual secrets, but we're missing the information required to do so and
# it's not obvious whether returning them is useful. At the Kubernetes level we
# have an array of local object references, which do not include a namespace.
# The Secrets are presumed to be read from the namespace in which Crossplane is
# running, which we do not know.

"""
A ProviderSpec represents the desired state of a provider.
"""
type ProviderSpec {
  """
  The name of the provider package to pull from an OCI registry.
  """
  package: String!

  """
  RevisionActivationPolicy specifies how the package controller should update
  from one revision to the next.
  """
  revisionActivationPolicy: RevisionActivationPolicy

  """
  RevisionHistoryLimit dictates how the package controller cleans up old
  inactive package revisions. Defaults to 1. Can be disabled by explicitly
  setting to 0.
  """
  revisionHistoryLimit: Int

  """
  PackagePullPolicy defines the pull policy for the package.
  """
  packagePullPolicy: PackagePullPolicy

  """
  IgnoreCrossplaneConstraints indicates to the package manager whether to honor
  Crossplane version constraints specified by the package.
  """
  ignoreCrossplaneConstraints: Boolean

  """
  SkipDependencyResolution indicates to the package manager whether to skip
  resolving dependencies for a package.
  """
  skipDependencyResolution: Boolean
}

"""
A ProviderStatus represents the observed state of a provider.
"""
type ProviderStatus implements ConditionedStatus {
  """
  The observed condition of this resource.
  """
  conditions: [Condition!]

  """
  CurrentRevision is the name of the current package revision. It will reflect
  the most up to date revision, whether it has been activated or not.
  """
  currentRevision: String

  """
  CurrentIdentifier is the most recent package source that was used to produce a
  revision. The package manager uses this field to determine whether to check
  for package updates for a given source when packagePullPolicy is set to
  IfNotPresent.
  """
  currentIdentifier: String
}

"""
A ProviderRevision represents a revision or 'version' of a provider.
"""
type ProviderRevision implements Node & KubernetesResource {
  "An opaque identifier that is unique across all types."
  id: ID!

  "The underlying Kubernetes API version of this resource."
  apiVersion: String!

  "The underlying Kubernetes API kind of this resource."
  kind: String!

  "Metadata that is common to all Kubernetes API resources."
  metadata: ObjectMeta!

  "The desired state of this resource."
  spec: ProviderRevisionSpec!

  "The observed state of this resource."
  status: ProviderRevisionStatus

  "An unstructured JSON representation of the underlying Kubernetes resource."
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )

  "Events pertaining to this resource."
  events: EventConnection! @goField(forceResolver: true)
}

"""
A ProviderRevisionSpec represents the desired state of a provider revision.
"""
type ProviderRevisionSpec {
  """
  Desired state of the provider revision.
  """
  desiredState: PackageRevisionDesiredState!

  """
  Package image used by the install pod to extract package contents.
  """
  package: String!

  """
  PackagePullPolicy defines the pull policy for the package. It is also applied
  to any images pulled for the package, such as a provider's controller image.
  """
  packagePullPolicy: PackagePullPolicy

  """
  Revision number. Indicates when the revision will be garbage collected based
  on the configuration's RevisionHistoryLimit.
  """
  revision: Int!

  """
  IgnoreCrossplaneConstraints indicates to the package manager whether to honor
  Crossplane version constrains specified by the package.
  """
  ignoreCrossplaneConstraints: Boolean

  """
  SkipDependencyResolution indicates to the package manager whether to skip
  resolving dependencies for a package.
  """
  skipDependencyResolution: Boolean
}

"""
A ProviderRevisionStatus represents the observed state of a provider revision.
"""
type ProviderRevisionStatus implements ConditionedStatus {
  """
  The observed condition of this resource.
  """
  conditions: [Condition!]

  """
  The number of known dependencies.
  """
  foundDependencies: Int

  """
  The number of installed dependencies.
  """
  installedDependencies: Int

  """
  The number of invalid dependencies.
  """
  invalidDependencies: Int

  """
  Permissions requested by this configuration revision.
  """
  permissionRequests: [PolicyRule!]

  """
  Objects owned by this provider revision - i.e. objects that were created by
  this provider revision or that would have been created if they did not already
  exist.

  In practice these objects are currently always a CustomResourceDefinition.
  Crossplane lints the content of provider packages to enforce this, but it's
  not enforced at the Kubernetes API level. We return an array of
  KubernetesResource here because doing so allows us to package different types
  in future without a breaking GraphQL schema change.
  """
  objects: KubernetesResourceConnection! @goField(forceResolver: true)
}
