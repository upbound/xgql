"""
A ManagedResource is a Kubernetes API representation of a resource in an
external system, such as a cloud provider's API. Crossplane providers add
support for new kinds of managed resource.
"""
type ManagedResource implements Node & KubernetesResource {
  "An opaque identifier that is unique across all types."
  id: ID!

  "The underlying Kubernetes API version of this resource."
  apiVersion: String!

  "The underlying Kubernetes API kind of this resource."
  kind: String!

  "Metadata that is common to all Kubernetes API resources."
  metadata: ObjectMeta!

  "The desired state of this resource."
  spec: ManagedResourceSpec!

  "The observed state of this resource."
  status: ManagedResourceStatus

  "An unstructured JSON representation of the underlying Kubernetes resource."
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )

  "Events pertaining to this resource."
  events: EventConnection! @goField(forceResolver: true)

  "The definition of this resource."
  definition: ManagedResourceDefinition @goField(forceResolver: true)
}

"""
A ManagedResourceDefinition defines a managed resource.

At the time of writing a ManagedResourceDefinition will always be a
CustomResourceDefinition. We use a union because this may change in future per
https://github.com/crossplane/crossplane/issues/2262
"""
union ManagedResourceDefinition = CustomResourceDefinition

"""
A ManagedResourceSpec represents the desired state of a managed resource.
"""
type ManagedResourceSpec {
  """
  The secret this managed resource writes its connection details to.
  """
  connectionSecret: Secret @goField(forceResolver: true)

  """
  The provider configuration configures how this managed resource interacts
  with an external system.
  """
  providerConfigRef: ProviderConfigReference

  """
  The deletion policy specifies what will happen to the underlying external
  resource when this managed resource is deleted.
  """
  deletionPolicy: DeletionPolicy
}

"""
A reference to the ProviderConfig used by a particular managed resource.
"""
type ProviderConfigReference {
  "Name of the provider config."
  name: String!
}

"""
A DeletionPolicy specifies what will happen to the underlying external resource
when this managed resource is deleted - either "Delete" or "Orphan" the external
resource.
"""
enum DeletionPolicy {
  """
  Delete the resource from the external system when the managed resource is
  deleted.
  """
  DELETE

  """
  Leave the resource in the external system when the managed resource is
  deleted.
  """
  ORPHAN
}

"""
A ManagedResourceStatus represents the observed state of a managed resource.
"""
type ManagedResourceStatus implements ConditionedStatus {
  "The observed condition of this resource."
  conditions: [Condition!]
}
