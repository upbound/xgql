"""
Time is a timestamp.
"""
scalar Time

"""
A StringMap is a 'map' of string keys to string values, i.e. an object with
string keys and string values. Note that despite this value being returned as a
'real' object (as opposed to JSON encoded as a string like JSON) this type
is still a scalar, and thus it's not possible to query at key granularity; you
always get the whole map.
"""
scalar StringMap

"""
Unstructured, schemaless JSON.
"""
scalar JSON

"""
An object with an ID.
"""
interface Node {
  "An opaque identifier that is unique across all types."
  id: ID!
}

"""
An object that corresponds to a Kubernetes API resource.
"""
interface KubernetesResource {
  "An opaque identifier that is unique across all types."
  id: ID!

  "The underlying Kubernetes API version of this resource."
  apiVersion: String!

  "The underlying Kubernetes API kind of this resource."
  kind: String!

  "Metadata that is common to all Kubernetes API resources."
  metadata: ObjectMeta!

  "An unstructured JSON representation of the underlying Kubernetes resource."
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )

  "Events pertaining to this resource."
  events: EventConnection!
}

"""
An EventConnection represents a connection to events.
"""
type EventConnection {
  "Connected nodes."
  nodes: [Event!]

  "The total number of connected nodes."
  totalCount: Int!
}

"""
A KubernetesResourceConnection represents a connection to Kubernetes resources.
"""
type KubernetesResourceConnection {
  "Connected nodes."
  nodes: [KubernetesResource!]

  "The total number of connected nodes."
  totalCount: Int!
}

"""
A GenericResource represents a kind of Kubernetes resource that does not
correspond to a kind or class of resources that is more specifically modelled
by xgql.
"""
type GenericResource implements Node & KubernetesResource {
  "An opaque identifier that is unique across all types."
  id: ID!

  "The underlying Kubernetes API version of this resource."
  apiVersion: String!

  "The underlying Kubernetes API kind of this resource."
  kind: String!

  "Metadata that is common to all Kubernetes API resources."
  metadata: ObjectMeta!

  "An unstructured JSON representation of the underlying Kubernetes resource."
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )

  "Events pertaining to this resource."
  events: EventConnection! @goField(forceResolver: true)
}

"""
ObjectMeta is metadata that is common to all Kubernetes API resources.
https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#objectmeta-v1-meta
"""
type ObjectMeta {
  """
  The name of this resource. Unique within its API group and version for
  cluster scoped resources, and also within its namespace for namespaced
  resources.
  """
  name: String!

  """
  An optional prefix used by the Kubernetes API server to generate a unique
  name at creation time if a name was not provided.
  """
  generateName: String

  """
  The space within each name must be unique, for namespaced resources. An empty
  namespace is equivalent to the 'default' namespace.
  """
  namespace: String

  """
  An opaque identifier of this resource that is unique across time.
  """
  uid: String!

  """
  An opaque version that changes whenever the underlying resource changes in the
  API server. Used for change detection and optimistic concurrency.
  """
  resourceVersion: String!

  """
  A sequence number representing the specific generation of the desired state.
  """
  generation: Int!

  """
  The time the underlying Kubernetes resource was created in the API server.
  """
  creationTime: Time!

  """
  The time at which the underlying Kubernetes resource will be (or was) deleted.
  Resources may exist past their deletion time while their controllers handle
  any required cleanup.
  """
  deletionTime: Time

  """
  A map of string keys and values that can be used to organize and categorize
  (scope and select) objects. May match selectors of replication controllers
  and services.

   More info: http://kubernetes.io/docs/user-guide/labels
  """
  labels("Label keys for which to return values." keys: [String!]): StringMap

  """
  A map of string keys and values that may be set by external tools to store and
  retrieve arbitrary metadata.

  More info: http://kubernetes.io/docs/user-guide/annotations
  """
  annotations(
    "Annotation keys for which to return values."
    keys: [String!]
  ): StringMap

  """
  Resources depended by this resource. If ALL resources in the list have been
  deleted, this resource will be garbage collected. If this resource is managed
  by a controller, then an entry in this list will point to this controller,
  with the controller field set to true. There cannot be more than one managing
  controller.
  """
  owners: OwnerConnection! @goField(forceResolver: true)

  """
  The controller of this resource, if any. In Kubernetes exactly one owner of a
  resource may be its "controller" - the resource that manages its lifecycle. A
  Crossplane Provider creates and manipulates ProviderRevisions and each
  ProviderRevision creates and manipulates CustomResourceDefinitions in turn. In
  this example the Provider would be the controller of its ProviderRevisions,
  and the ProviderRevisions would be the controller of their CRDs.
  """
  controller: KubernetesResource @goField(forceResolver: true)
}

"""
An OwnerConnection represents a connection to an owner.
"""
type OwnerConnection {
  "Connected nodes."
  nodes: [Owner!]
  "The total number of connected nodes."
  totalCount: Int!
}

"""
An owner of a Kubernetes resource.
"""
type Owner {
  "The owner."
  resource: KubernetesResource!

  "Whether the owner is the controller of the owned Kubernetes resource."
  controller: Boolean
}

"""
A ConditionedStatus represents the observed state of a Kubernetes resource that
exposes status conditions.
"""
interface ConditionedStatus {
  "The observed condition of this resource."
  conditions: [Condition!]
}

"""
A condition that may apply to a resource.

Note that type and reason are intentionally not enums; Crossplane does not limit
the allowed values at the API level.
"""
type Condition {
  """
  Type of this condition. At most one of each condition type may apply to a
  resource at any point in time.
  """
  type: String!

  """
  Status of this condition; is it currently True, False, or Unknown?
  """
  status: ConditionStatus!

  """
  LastTransitionTime is the last time this condition transitioned from one
  status to another.
  """
  lastTransitionTime: Time!

  """
  A Reason for this condition's last transition from one status to another.
  """
  reason: String!

  """
  A Message containing details about this condition's last transition from one
  status to another, if any.
  """
  message: String
}

"""
A ConditionStatus represensts the status of a condition.
"""
enum ConditionStatus {
  "The status of the condition is unknown."
  UNKNOWN

  "The condition is false."
  FALSE

  "The condition is true."
  TRUE
}

"""
A PolicyRule holds information that describes a KubernetesRBAC policy rule.
"""
type PolicyRule {
  """
  Verbs is a list of verbs that apply to ALL the resources specified by this
  rule. '*' represents all verbs.
  """
  verbs: [String!]!

  """
  APIGroups is the name of the APIGroup that contains the resources. If multiple
  API groups are specified, any action requested against one of the enumerated
  resources in any API group will be allowed.
  """
  apiGroups: [String!]

  """
  Resources is a list of resources this rule applies to. '*' represents all
  resources.
  """
  resources: [String!]

  """
  ResourceNames is a list of names that the rule applies to. An empty set means
  that everything is allowed.
  """
  resourceNames: [String!]

  """
  NonResourceURLs is a set of partial urls that a user should have access to.
  '*' is allowed, but only as the full, final step in the path. Rules can either
  apply to API resources (such as "pods" or "secrets") or non-resource URL paths
  (such as "/api"),  but not both.
  """
  nonResourceURLs: [String!]
}

"""
A LabelSelector matches a Kubernetes resource by labels.
"""
type LabelSelector {
  "The labels to match on."
  matchLabels: StringMap
}

# NOTE(negz): Event does not implement KubernetesResource simply because an
# event does not have events. We might consider creating a distinct
# InvolvedObject interface (or something like that) for the events field.

"""
An event pertaining to a Kubernetes resource.
"""
type Event implements Node {
  "An opaque identifier that is unique across all types."
  id: ID!

  "The underlying Kubernetes API version of this resource."
  apiVersion: String!

  "The underlying Kubernetes API kind of this resource."
  kind: String!

  "Metadata that is common to all Kubernetes API resources."
  metadata: ObjectMeta!

  "The Kubernetes resource this event pertains to."
  involvedObject: KubernetesResource! @goField(forceResolver: true)

  "The type of event."
  type: EventType

  "The reason the event was emitted."
  reason: String

  "Details about the event, if any."
  message: String

  "The source of the event - e.g. a controller."
  source: EventSource

  "The number of times this event has occurred."
  count: Int

  "The time at which this event was first recorded."
  firstTime: Time

  "The time at which this event was most recently recorded."
  lastTime: Time

  "An unstructured JSON representation of the event."
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )
}

"""
An EventSource is the source of an event. Note that in this context 'source'
indicates the software or system that emitted the event, not the Kubernetes
resource it pertains to.
"""
type EventSource {
  "The software component that emitted the event."
  component: String
}

"""
An EventType indicates the type of an event.
"""
enum EventType {
  "A normal, informational event."
  NORMAL

  "A warning that something suboptimal has occurred."
  WARNING
}

"""
A Secret holds secret data.
"""
type Secret implements Node & KubernetesResource {
  """
  An opaque identifier that is unique across all types.
  """
  id: ID!

  """
  The underlying Kubernetes API version of this resource.
  """
  apiVersion: String!

  """
  The underlying Kubernetes API kind of this resource.
  """
  kind: String!

  """
  Metadata that is common to all Kubernetes API resources.
  """
  metadata: ObjectMeta!

  """
  Type of this secret.
  """
  type: String

  """
  The data stored in this secret. Values are not base64 encoded.
  """
  data("Data keys for which to return values." keys: [String!]): StringMap
    @goField(name: "data")

  """
  An unstructured JSON representation of the underlying Kubernetes resource.
  """
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )

  """
  Events pertaining to this resource.
  """
  events: EventConnection! @goField(forceResolver: true)
}

"""
A ConfigMap holds configuration data.
"""
type ConfigMap implements Node & KubernetesResource {
  """
  An opaque identifier that is unique across all types.
  """
  id: ID!

  """
  The underlying Kubernetes API version of this resource.
  """
  apiVersion: String!

  """
  The underlying Kubernetes API kind of this resource.
  """
  kind: String!

  """
  Metadata that is common to all Kubernetes API resources.
  """
  metadata: ObjectMeta!

  """
  The data stored in this config map.
  """
  data("Data keys for which to return values." keys: [String!]): StringMap
    @goField(name: "data")

  """
  An unstructured JSON representation of the underlying Kubernetes resource.
  """
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )

  # TODO(negz): Support binaryData too? What would the return value be?

  """
  Events pertaining to this resource.
  """
  events: EventConnection! @goField(forceResolver: true)
}

"`ObjectReference` contains enough information to let you inspect or modify the referred object."
type ObjectReference {
  "Kind of the referent."
  kind: String

  "Namespace of the referent."
  namespace: String

  "Name of the referent."
  name: String
}

"""
`LocalObjectReference` contains a name to to let you inspect or modify the
locally referred object.
"""
type LocalObjectReference {
  "Name of the referent."
  name: String!
}

"A `SecretReference` is a reference to a secret in an arbitrary namespace."
type SecretReference {
  "Name of the `Secret`."
  name: String!

  "Namespace of the `Secret`."
  namespace: String!
}

"""
A CustomResourceDefinition defines a type of custom resource that extends the
set of resources supported by the Kubernetes API.
"""
type CustomResourceDefinition implements Node & KubernetesResource {
  "An opaque identifier that is unique across all types."
  id: ID!

  "The underlying Kubernetes API version of this resource."
  apiVersion: String!

  "The underlying Kubernetes API kind of this resource."
  kind: String!

  "Metadata that is common to all Kubernetes API resources."
  metadata: ObjectMeta!

  "The desired state of this resource."
  spec: CustomResourceDefinitionSpec!

  "The observed state of this resource."
  status: CustomResourceDefinitionStatus

  "An unstructured JSON representation of the underlying Kubernetes resource."
  unstructured: JSON!
    @deprecated(reason: "Use `fieldPath` instead")
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.SkipUnstructured"
      embed: true
    )

  """
  A JSON representation of a field within the underlying Kubernetes resource.

  API conventions describe the syntax as:
  > standard JavaScript syntax for accessing that field, assuming the JSON
  > object was transformed into a JavaScript object, without the leading dot,
  > such as `metadata.name`.

  Valid examples:

  * `metadata.name`
  * `spec.containers[0].name`
  * `data[.config.yml]`
  * `metadata.annotations['crossplane.io/external-name']`
  * `spec.items[0][8]`
  * `apiVersion`
  * `[42]`
  * `spec.containers[*].args[*]` - Supports wildcard expansion.

  Invalid examples:

  * `.metadata.name` - Leading period.
  * `metadata..name` - Double period.
  * `metadata.name.` - Trailing period.
  * `spec.containers[]` - Empty brackets.
  * `spec.containers.[0].name` - Period before open bracket.

  Wildcards support:

  For an object with the following data:

  ```json
  {
    "spec": {
      "containers": [
        {
          "name": "cool",
          "image": "latest",
          "args": [
            "start",
            "now",
            "debug"
          ]
        }
      ]
    }
  }
  ```

  The wildcard `spec.containers[*].args[*]` will be expanded to:

  ```json
  [
    "spec.containers[0].args[0]",
    "spec.containers[0].args[1]",
    "spec.containers[0].args[2]",
  ]
  ```

  And the following result will be returned:

  ```json
  [
    "start",
    "now",
    "debug"
  ]
  ```

  https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
  """
  fieldPath(
    "A path to a field within a Kubernetes object."
    path: String
  ): JSON!
    @goField(
      type: "github.com/upbound/xgql/internal/graph/model.PavedAccess"
      embed: true
    )

  "Events pertaining to this resource."
  events: EventConnection! @goField(forceResolver: true)

  "Custom resources defined by this CRD"
  definedResources(
    "Return resources of this version."
    version: String
  ): KubernetesResourceConnection! @goField(forceResolver: true)
}

"""
A CustomResourceDefinitionSpec represents the desired state of a custom resource
definition.
"""
type CustomResourceDefinitionSpec {
  """
  Group specifies the API group of the defined custom resource. Custom resources
  are served under `/apis/<group>/...`. Must match the name of the CRD (in the
  form `<names.plural>.<group>`).
  """
  group: String!

  """
  Names specifies the resource and kind names of the defined custom resource.
  """
  names: CustomResourceDefinitionNames!

  """
  Scope of the defined custom resource.
  """
  scope: ResourceScope!

  """
  Versions is the list of all API versions of the defined custom resource.
  Version names are used to compute the order in which served versions are
  listed in API discovery. If the version string is "kube-like", it will sort
  above non "kube-like" version strings, which are ordered lexicographically.
  "Kube-like" versions start with a "v", then are followed by a number (the
  major version), then optionally the string "alpha" or "beta" and another
  number (the minor version). These are sorted first by GA > beta > alpha (where
  GA is a version with no suffix such as beta or alpha), and then by comparing
  major version, then minor version. An example sorted list of versions: v10,
  v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
  """
  versions: [CustomResourceDefinitionVersion!]
}

"""
ResourceScope defines the scopes available to custom resources.
"""
enum ResourceScope {
  """
  Cluster scoped resources exist outside any namespace. The combination of their
  API version, kind, and name must be unique within a cluster.
  """
  CLUSTER_SCOPED

  """
  Namespace scoped resources exist within a particular namespace. The
  combination of their API version, kind, and name must be unique only within
  their namespace.
  """
  NAMESPACE_SCOPED
}

"""
CustomResourceDefinitionNames specifies the resource and kind names of the
defined custom resource.
"""
type CustomResourceDefinitionNames {
  """
  The plural name of the resource to serve. Custom resources are served by
   the Kuberntes API under `/apis/<group>/<version>/.../<plural>`.
  """
  plural: String!

  """
  The singular name of the resource.
  """
  singular: String

  """
  Short names for the resource, exposed in API discovery documents, and used by
  clients to support invocations like `kubectl get <shortname>`.
  """
  shortNames: [String!]

  """
  The Kubernetes API kind of the defined resource.
  """
  kind: String!

  """
  The Kubernetes API kind of a list of the defined resource.
  """
  listKind: String

  """
  A list of grouped resources this custom resource belongs to (e.g. 'all'). This
  is published in API discovery documents, and used by clients to support
  invocations like `kubectl get all`.
  """
  categories: [String!]
}

"""
A CustomResourceDefinitionVersion describes a version of a custom resource.
"""
type CustomResourceDefinitionVersion {
  """
  Name of this version, e.g. “v1”, “v2beta1”, etc. Custom resources are served
  under this version at `/apis/<group>/<version>/...` if `served` istrue.
  """
  name: String!

  """
  Served specifies that this version should be served via Kubernetes REST APIs.
  """
  served: Boolean!

  """
  Schema describes the schema used for validation, pruning, and defaulting of
  this version of the defined custom resource.
  """
  schema: CustomResourceValidation
}

"""
A CustomResourceValidation is a list of validation methods for a custom
resource.
"""
type CustomResourceValidation {
  "OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning."
  openAPIV3Schema: JSON
}

"""
A CustomResourceDefinitionStatus represents the observed state of a custom
resource definition.
"""
type CustomResourceDefinitionStatus implements ConditionedStatus {
  "The observed condition of this resource."
  conditions: [Condition!]
}
