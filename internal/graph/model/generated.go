// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	v11 "k8s.io/api/core/v1"
)

// A ConditionedStatus represents the observed state of a Kubernetes resource that
// exposes status conditions.
type ConditionedStatus interface {
	IsConditionedStatus()
}

// An object that corresponds to a Kubernetes API resource.
type KubernetesResource interface {
	IsKubernetesResource()
}

// A ManagedResourceDefinition defines a managed resource.
//
// At the time of writing a ManagedResourceDefinition will always be a
// CustomResourceDefinition. We use a union because this may change in future per
// https://github.com/crossplane/crossplane/issues/2262
type ManagedResourceDefinition interface {
	IsManagedResourceDefinition()
}

// An object with an ID.
type Node interface {
	IsNode()
}

// A ProviderConfigDefinition defines a provider configuration.
//
// At the time of writing a ProviderConfigDefinition will always be a
// CustomResourceDefinition. We use a union because this may change in future per
// https://github.com/crossplane/crossplane/issues/2262
type ProviderConfigDefinition interface {
	IsProviderConfigDefinition()
}

// A CompositeResource is a resource this is reconciled by composing other
// composite or managed resources. Composite resources use a Composition to
// determine which resources to compose, and how.
type CompositeResource struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec CompositeResourceSpec `json:"spec"`
	// The observed state of this resource.
	Status *CompositeResourceStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
	// The definition of this resource.
	Definition *CompositeResourceDefinition `json:"definition,omitempty"`
}

func (CompositeResource) IsNode() {}

func (CompositeResource) IsKubernetesResource() {}

// A CompositeResourceClaim is a namespaced proxy for a composite resource.
type CompositeResourceClaim struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec CompositeResourceClaimSpec `json:"spec"`
	// The observed state of this resource.
	Status *CompositeResourceClaimStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
	// The definition of this resource.
	Definition *CompositeResourceDefinition `json:"definition,omitempty"`
}

func (CompositeResourceClaim) IsNode() {}

func (CompositeResourceClaim) IsKubernetesResource() {}

// A CompositeResourceConnection represents a connection to composite resource
// claims.
type CompositeResourceClaimConnection struct {
	// Connected nodes.
	Nodes []CompositeResourceClaim `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// CompositeResourceConnectionDetails represents the observed status of a composite
// resource claim's connection details.
type CompositeResourceClaimConnectionDetails struct {
	// The time at which the composite resource claim's connection details were last
	// published.
	LastPublishedTime *time.Time `json:"lastPublishedTime,omitempty"`
}

// A CompositeResourceClaimStatus represents the observed status of a composite
// resource claim.
type CompositeResourceClaimStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
	// The status of this composite resource's connection details.
	ConnectionDetails *CompositeResourceClaimConnectionDetails `json:"connectionDetails,omitempty"`
}

func (CompositeResourceClaimStatus) IsConditionedStatus() {}

// A CompositeResourceConnection represents a connection to composite resources.
type CompositeResourceConnection struct {
	// Connected nodes.
	Nodes []CompositeResource `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// CompositeResourceConnectionDetails represents the observed status of a composite
// resource's connection details.
type CompositeResourceConnectionDetails struct {
	// The time at which the composite resource's connection details were last
	// published.
	LastPublishedTime *time.Time `json:"lastPublishedTime,omitempty"`
}

// A CompositeResourceDefinition (or XRD) defines a new kind of resource. The new
// resource is composed of other composite or managed resources.
type CompositeResourceDefinition struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec CompositeResourceDefinitionSpec `json:"spec"`
	// The observed state of this resource.
	Status *CompositeResourceDefinitionStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
	// The generated `CustomResourceDefinition` for this XRD
	CompositeResourceCrd *CustomResourceDefinition `json:"compositeResourceCRD,omitempty"`
	// The generated `CustomResourceDefinition` of this XRDs `CompositeClaim` if defined
	CompositeResourceClaimCrd *CustomResourceDefinition `json:"compositeResourceClaimCRD,omitempty"`
	// Composite resources (XRs) defined by this XRD.
	DefinedCompositeResources CompositeResourceConnection `json:"definedCompositeResources"`
	// Composite resource claims (XRCs) defined by this XRD.
	DefinedCompositeResourceClaims CompositeResourceClaimConnection `json:"definedCompositeResourceClaims"`
}

func (CompositeResourceDefinition) IsNode() {}

func (CompositeResourceDefinition) IsKubernetesResource() {}

// A CompositeResourceDefinitionConnection represents a connection to composite
// resource definitions (XRDs).
type CompositeResourceDefinitionConnection struct {
	// Connected nodes.
	Nodes []CompositeResourceDefinition `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// A CompositeResourceDefinitionControllerStatus shows the observed state of the
// controllers that power the definition.
type CompositeResourceDefinitionControllerStatus struct {
	// The CompositeResourceTypeRef is the type of composite resource that Crossplane
	// is currently reconciling for this definition. Its version will eventually
	// become consistent with the definition's referenceable version. Note that
	// clients may interact with any served type; this is simply the type that
	// Crossplane interacts with.
	CompositeResourceType *TypeReference `json:"compositeResourceType,omitempty"`
	// The CompositeResourceClaimTypeRef is the type of composite resource claim
	// that Crossplane is currently reconciling for this definition. Its version
	// will eventually become consistent with the definition's referenceable version.
	// Note that clients may interact with any served type; this is simply the type
	// that Crossplane interacts with.
	CompositeResourceClaimType *TypeReference `json:"compositeResourceClaimType,omitempty"`
}

// CompositeResourceDefinitionNames specifies the resource and kind names of the
// defined composite resource or claim.
type CompositeResourceDefinitionNames struct {
	// The plural name of the resource to serve. Composite resources are served by
	// the Kuberntes API under `/apis/<group>/<version>/.../<plural>`.
	Plural string `json:"plural"`
	// The singular name of the resource.
	Singular *string `json:"singular,omitempty"`
	// Short names for the resource, exposed in API discovery documents, and used by
	// clients to support invocations like `kubectl get <shortname>`.
	ShortNames []string `json:"shortNames,omitempty"`
	// The Kubernetes API kind of the defined resource.
	Kind string `json:"kind"`
	// The Kubernetes API kind of a list of the defined resource.
	ListKind *string `json:"listKind,omitempty"`
	// A list of grouped resources this custom resource belongs to (e.g. 'all'). This
	// is published in API discovery documents, and used by clients to support
	// invocations like `kubectl get all`.
	Categories []string `json:"categories,omitempty"`
}

// A CompositeResourceDefinitionStatus represents the observed state of a composite
// resource definition.
type CompositeResourceDefinitionStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
	// Controllers represents the status of the controllers that power this
	// composite resource definition.
	Controllers *CompositeResourceDefinitionControllerStatus `json:"controllers,omitempty"`
}

func (CompositeResourceDefinitionStatus) IsConditionedStatus() {}

// A CompositeResourceDefinitionVersion describes a version of a composite
// resource.
type CompositeResourceDefinitionVersion struct {
	// Name of this version, e.g. “v1”, “v2beta1”, etc. Composite resources are
	// served under this version at `/apis/<group>/<version>/...` if `served` is
	// true.
	Name string `json:"name"`
	// Referenceable specifies that this version may be referenced by a Composition
	// in order to configure which resources an XR may be composed of. Exactly one
	// version must be marked as referenceable; all Compositions must target only the
	// referenceable version. The referenceable version must be served.
	Referenceable bool `json:"referenceable"`
	// Served specifies that this version should be served via Kubernetes REST APIs.
	Served bool `json:"served"`
	// Schema describes the schema used for validation, pruning, and defaulting of
	// this version of the defined composite resource. Fields required by all
	// composite resources are injected into this schema automatically, and override
	// equivalently named fields in this schema.
	Schema *CompositeResourceValidation `json:"schema,omitempty"`
}

// A CompositeResourceClaimStatus represents the observed state of a composite
// resource.
type CompositeResourceStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
	// The status of this composite resource's connection details.
	ConnectionDetails *CompositeResourceConnectionDetails `json:"connectionDetails,omitempty"`
}

func (CompositeResourceStatus) IsConditionedStatus() {}

// A CompositeResourceValidation is a list of validation methods for a composite
// resource.
type CompositeResourceValidation struct {
	// OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
	OpenAPIV3Schema []byte `json:"openAPIV3Schema,omitempty"`
}

// A Composition defines the group of resources to be created when a compatible
// type of composite resource is created with reference to the composition.
type Composition struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec CompositionSpec `json:"spec"`
	// The observed state of this resource.
	Status *CompositionStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
}

func (Composition) IsNode() {}

func (Composition) IsKubernetesResource() {}

// A CompositionConnection represents a connection to compositions.
type CompositionConnection struct {
	// Connected nodes.
	Nodes []Composition `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// A CompositionSpec represents the desired state of a composition.
type CompositionSpec struct {
	// CompositeTypeRef specifies the type of composite resource that this
	// composition is compatible with.
	CompositeTypeRef TypeReference `json:"compositeTypeRef"`
	// WriteConnectionSecretsToNamespace specifies the namespace in which the
	// connection secrets of composite resource dynamically provisioned using this
	// composition will be created.
	WriteConnectionSecretsToNamespace *string `json:"writeConnectionSecretsToNamespace,omitempty"`
}

// A CompositionStatus represents the observed state of a composition.
type CompositionStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
}

func (CompositionStatus) IsConditionedStatus() {}

// A condition that may apply to a resource.
//
// Note that type and reason are intentionally not enums; Crossplane does not limit
// the allowed values at the API level.
type Condition struct {
	// Type of this condition. At most one of each condition type may apply to a
	// resource at any point in time.
	Type string `json:"type"`
	// Status of this condition; is it currently True, False, or Unknown?
	Status ConditionStatus `json:"status"`
	// LastTransitionTime is the last time this condition transitioned from one
	// status to another.
	LastTransitionTime time.Time `json:"lastTransitionTime"`
	// A Reason for this condition's last transition from one status to another.
	Reason string `json:"reason"`
	// A Message containing details about this condition's last transition from one
	// status to another, if any.
	Message *string `json:"message,omitempty"`
}

// A ConfigMap holds configuration data.
type ConfigMap struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The data stored in this config map.
	data map[string]string `json:"data,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
}

func (ConfigMap) IsNode() {}

func (ConfigMap) IsKubernetesResource() {}

// A Configuration extends Crossplane with support for new composite resources.
type Configuration struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec ConfigurationSpec `json:"spec"`
	// The observed state of this resource.
	Status *ConfigurationStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
	// Revisions of this configuration.
	Revisions ConfigurationRevisionConnection `json:"revisions"`
	// The active revision of this configuration.
	ActiveRevision *ConfigurationRevision `json:"activeRevision,omitempty"`
}

func (Configuration) IsNode() {}

func (Configuration) IsKubernetesResource() {}

// A ConfigurationConnection represents a connection to configurations.
type ConfigurationConnection struct {
	// Connected nodes.
	Nodes []Configuration `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// A ConfigurationRevision represents a revision or 'version' of a configuration.
type ConfigurationRevision struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec ConfigurationRevisionSpec `json:"spec"`
	// The observed state of this resource.
	Status *ConfigurationRevisionStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
}

func (ConfigurationRevision) IsNode() {}

func (ConfigurationRevision) IsKubernetesResource() {}

// A ConfigurationRevisionConnection represents a connection to configuration
// revisions.
type ConfigurationRevisionConnection struct {
	// Connected nodes.
	Nodes []ConfigurationRevision `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// A ConfigurationRevisionSpec represents the desired state of a configuration
// revision.
type ConfigurationRevisionSpec struct {
	// Desired state of the configuration revision.
	DesiredState PackageRevisionDesiredState `json:"desiredState"`
	// Package image used by the install pod to extract package contents.
	Package string `json:"package"`
	// PackagePullPolicy defines the pull policy for the package..
	PackagePullPolicy *PackagePullPolicy `json:"packagePullPolicy,omitempty"`
	// Revision number. Indicates when the revision will be garbage collected based
	// on the configuration's RevisionHistoryLimit.
	Revision int `json:"revision"`
	// IgnoreCrossplaneConstraints indicates to the package manager whether to honor
	// Crossplane version constrains specified by the package.
	IgnoreCrossplaneConstraints *bool `json:"ignoreCrossplaneConstraints,omitempty"`
	// SkipDependencyResolution indicates to the package manager whether to skip
	// resolving dependencies for a package.
	SkipDependencyResolution *bool `json:"skipDependencyResolution,omitempty"`
}

// A ConfigurationRevisionStatus represents the observed state of a configuration
// revision.
type ConfigurationRevisionStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
	// The number of known dependencies.
	FoundDependencies *int `json:"foundDependencies,omitempty"`
	// The number of installed dependencies.
	InstalledDependencies *int `json:"installedDependencies,omitempty"`
	// The number of invalid dependencies.
	InvalidDependencies *int `json:"invalidDependencies,omitempty"`
	// Permissions requested by this configuration revision.
	PermissionRequests []PolicyRule `json:"permissionRequests,omitempty"`
	// Objects owned by this configuration revision - i.e. objects that were created
	// by this configuration revision or that would have been created if they did
	// not already exist.
	//
	// In practice these objects are currently always a CompositeResourceDefinition
	// or a Composition. Crossplane lints the content of configuration packages to
	// enforce this, but it's not enforced at the Kubernetes API level. We return an
	// array of KubernetesResource here because doing so allows us to package
	// different types in future without a breaking GraphQL schema change.
	Objects    KubernetesResourceConnection `json:"objects"`
	ObjectRefs []v1.TypedReference          `json:"-"`
}

func (ConfigurationRevisionStatus) IsConditionedStatus() {}

// A ConfigurationSpec represents the desired state of a configuration.
type ConfigurationSpec struct {
	// The name of the configuration package to pull from an OCI registry.
	Package string `json:"package"`
	// RevisionActivationPolicy specifies how the package controller should update
	// from one revision to the next.
	RevisionActivationPolicy *RevisionActivationPolicy `json:"revisionActivationPolicy,omitempty"`
	// RevisionHistoryLimit dictates how the package controller cleans up old
	// inactive package revisions. Defaults to 1. Can be disabled by explicitly
	// setting to 0.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty"`
	// PackagePullPolicy defines the pull policy for the package.
	PackagePullPolicy *PackagePullPolicy `json:"packagePullPolicy,omitempty"`
	// IgnoreCrossplaneConstraints indicates to the package manager whether to honor
	// Crossplane version constraints specified by the package.
	IgnoreCrossplaneConstraints *bool `json:"ignoreCrossplaneConstraints,omitempty"`
	// SkipDependencyResolution indicates to the package manager whether to skip
	// resolving dependencies for a package.
	SkipDependencyResolution *bool `json:"skipDependencyResolution,omitempty"`
}

// A ConfigurationRevisionStatus represents the observed state of a configuration.
type ConfigurationStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
	// CurrentRevision is the name of the current package revision. It will reflect
	// the most up to date revision, whether it has been activated or not.
	CurrentRevision *string `json:"currentRevision,omitempty"`
	// CurrentIdentifier is the most recent package source that was used to produce a
	// revision. The package manager uses this field to determine whether to check
	// for package updates for a given source when packagePullPolicy is set to
	// IfNotPresent.
	CurrentIdentifier *string `json:"currentIdentifier,omitempty"`
}

func (ConfigurationStatus) IsConditionedStatus() {}

// CreateKubernetesResourceInput is the input required to create a Kubernetes
// resource.
type CreateKubernetesResourceInput struct {
	// The Kubernetes resource to be created, as raw JSON.
	Unstructured []byte `json:"unstructured"`
	// Patches that should be applied to the Kubernetes resource before creation.
	Patches []Patch `json:"patches,omitempty"`
}

// CreateKubernetesResourcePayload is the result of creating a Kubernetes resource.
type CreateKubernetesResourcePayload struct {
	// The created Kubernetes resource. Null if the create failed.
	Resource KubernetesResource `json:"resource,omitempty"`
}

// A `CrossplaneResourceTreeConnection` represents a connection to `CrossplaneResourceTreeNode`s
type CrossplaneResourceTreeConnection struct {
	// Connected nodes.
	Nodes []CrossplaneResourceTreeNode `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// An `CrossplaneResourceTreeNode` is an `KubernetesResource` with a `ID` of its parent
// `CrossplaneResource`.
//
// Note: A `NULL` `parentId` represents the root of the descendant tree.
type CrossplaneResourceTreeNode struct {
	// The `ID` of the parent `KubernetesResource` (`NULL` is the root of the tree)
	ParentID *ReferenceID `json:"parentId,omitempty"`
	// The `KubernetesResource` object of this `CrossplaneResourceTreeNode`
	Resource KubernetesResource `json:"resource"`
}

// A CustomResourceDefinition defines a type of custom resource that extends the
// set of resources supported by the Kubernetes API.
type CustomResourceDefinition struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec CustomResourceDefinitionSpec `json:"spec"`
	// The observed state of this resource.
	Status *CustomResourceDefinitionStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
	// Custom resources defined by this CRD
	DefinedResources KubernetesResourceConnection `json:"definedResources"`
}

func (CustomResourceDefinition) IsNode() {}

func (CustomResourceDefinition) IsKubernetesResource() {}

func (CustomResourceDefinition) IsManagedResourceDefinition() {}

func (CustomResourceDefinition) IsProviderConfigDefinition() {}

// A CustomResourceDefinitionConnection represents a connection to custom
// resource definitions (CRDs).
type CustomResourceDefinitionConnection struct {
	// Connected nodes.
	Nodes []CustomResourceDefinition `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// CustomResourceDefinitionNames specifies the resource and kind names of the
// defined custom resource.
type CustomResourceDefinitionNames struct {
	// The plural name of the resource to serve. Custom resources are served by
	//  the Kuberntes API under `/apis/<group>/<version>/.../<plural>`.
	Plural string `json:"plural"`
	// The singular name of the resource.
	Singular *string `json:"singular,omitempty"`
	// Short names for the resource, exposed in API discovery documents, and used by
	// clients to support invocations like `kubectl get <shortname>`.
	ShortNames []string `json:"shortNames,omitempty"`
	// The Kubernetes API kind of the defined resource.
	Kind string `json:"kind"`
	// The Kubernetes API kind of a list of the defined resource.
	ListKind *string `json:"listKind,omitempty"`
	// A list of grouped resources this custom resource belongs to (e.g. 'all'). This
	// is published in API discovery documents, and used by clients to support
	// invocations like `kubectl get all`.
	Categories []string `json:"categories,omitempty"`
}

// A CustomResourceDefinitionSpec represents the desired state of a custom resource
// definition.
type CustomResourceDefinitionSpec struct {
	// Group specifies the API group of the defined custom resource. Custom resources
	// are served under `/apis/<group>/...`. Must match the name of the CRD (in the
	// form `<names.plural>.<group>`).
	Group string `json:"group"`
	// Names specifies the resource and kind names of the defined custom resource.
	Names CustomResourceDefinitionNames `json:"names"`
	// Scope of the defined custom resource.
	Scope ResourceScope `json:"scope"`
	// Versions is the list of all API versions of the defined custom resource.
	// Version names are used to compute the order in which served versions are
	// listed in API discovery. If the version string is "kube-like", it will sort
	// above non "kube-like" version strings, which are ordered lexicographically.
	// "Kube-like" versions start with a "v", then are followed by a number (the
	// major version), then optionally the string "alpha" or "beta" and another
	// number (the minor version). These are sorted first by GA > beta > alpha (where
	// GA is a version with no suffix such as beta or alpha), and then by comparing
	// major version, then minor version. An example sorted list of versions: v10,
	// v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	Versions []CustomResourceDefinitionVersion `json:"versions,omitempty"`
}

// A CustomResourceDefinitionStatus represents the observed state of a custom
// resource definition.
type CustomResourceDefinitionStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
}

func (CustomResourceDefinitionStatus) IsConditionedStatus() {}

// A CustomResourceDefinitionVersion describes a version of a custom resource.
type CustomResourceDefinitionVersion struct {
	// Name of this version, e.g. “v1”, “v2beta1”, etc. Custom resources are served
	// under this version at `/apis/<group>/<version>/...` if `served` istrue.
	Name string `json:"name"`
	// Served specifies that this version should be served via Kubernetes REST APIs.
	Served bool `json:"served"`
	// Schema describes the schema used for validation, pruning, and defaulting of
	// this version of the defined custom resource.
	Schema *CustomResourceValidation `json:"schema,omitempty"`
}

// A CustomResourceValidation is a list of validation methods for a custom
// resource.
type CustomResourceValidation struct {
	// OpenAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
	OpenAPIV3Schema []byte `json:"openAPIV3Schema,omitempty"`
}

// Options to filter or limit the defined composite claim resources
type DefinedCompositeResourceClaimOptionsInput struct {
	// Return resources of this version.
	Version *string `json:"version,omitempty"`
	// Return resources in this namespace.
	Namespace *string `json:"namespace,omitempty"`
	// Optionally limit the results to XRCs.
	// If `true` return resources that have `Condition` `Ready` `True`.
	// If `false` return resources that have `Condition` `Ready` `False` or `Condition` `Ready` not present
	Ready *bool `json:"ready,omitempty"`
}

// Options to filter or limit the defined composite resources
type DefinedCompositeResourceOptionsInput struct {
	// Return resources of this version.
	Version *string `json:"version,omitempty"`
	// Optionally limit the results to XRCs.
	// If `true` return resources that have `Condition` `Ready` `True`.
	// If `false` return resources that have `Condition` `Ready` `False` or `Condition` `Ready` not present
	Ready *bool `json:"ready,omitempty"`
}

// DeleteKubernetesResourcePayload is the result of deleting a Kubernetes resource.
type DeleteKubernetesResourcePayload struct {
	// The deleted Kubernetes resource. Null if the delete failed.
	Resource KubernetesResource `json:"resource,omitempty"`
}

// An event pertaining to a Kubernetes resource.
type Event struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The Kubernetes resource this event pertains to.
	InvolvedObject KubernetesResource `json:"involvedObject"`
	// The type of event.
	Type *EventType `json:"type,omitempty"`
	// The reason the event was emitted.
	Reason *string `json:"reason,omitempty"`
	// Details about the event, if any.
	Message *string `json:"message,omitempty"`
	// The source of the event - e.g. a controller.
	Source *EventSource `json:"source,omitempty"`
	// The number of times this event has occurred.
	Count *int `json:"count,omitempty"`
	// The time at which this event was first recorded.
	FirstTime *time.Time `json:"firstTime,omitempty"`
	// The time at which this event was most recently recorded.
	LastTime *time.Time `json:"lastTime,omitempty"`
	// An unstructured JSON representation of the event.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess       `json:"fieldPath"`
	InvolvedObjectRef v11.ObjectReference `json:"-"`
}

func (Event) IsNode() {}

// An EventConnection represents a connection to events.
type EventConnection struct {
	// Connected nodes.
	Nodes []Event `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// An EventSource is the source of an event. Note that in this context 'source'
// indicates the software or system that emitted the event, not the Kubernetes
// resource it pertains to.
type EventSource struct {
	// The software component that emitted the event.
	Component *string `json:"component,omitempty"`
}

// A GenericResource represents a kind of Kubernetes resource that does not
// correspond to a kind or class of resources that is more specifically modelled
// by xgql.
type GenericResource struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
}

func (GenericResource) IsNode() {}

func (GenericResource) IsKubernetesResource() {}

// A KubernetesResourceConnection represents a connection to Kubernetes resources.
type KubernetesResourceConnection struct {
	// Connected nodes.
	Nodes []KubernetesResource `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// A LabelSelector matches a Kubernetes resource by labels.
type LabelSelector struct {
	// The labels to match on.
	MatchLabels map[string]string `json:"matchLabels,omitempty"`
}

// `LocalObjectReference` contains a name to to let you inspect or modify the
// locally referred object.
type LocalObjectReference struct {
	// Name of the referent.
	Name string `json:"name"`
}

// A ManagedResource is a Kubernetes API representation of a resource in an
// external system, such as a cloud provider's API. Crossplane providers add
// support for new kinds of managed resource.
type ManagedResource struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec ManagedResourceSpec `json:"spec"`
	// The observed state of this resource.
	Status *ManagedResourceStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
	// The definition of this resource.
	Definition ManagedResourceDefinition `json:"definition,omitempty"`
}

func (ManagedResource) IsNode() {}

func (ManagedResource) IsKubernetesResource() {}

// A ManagedResourceStatus represents the observed state of a managed resource.
type ManagedResourceStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
}

func (ManagedResourceStatus) IsConditionedStatus() {}

// `ObjectReference` contains enough information to let you inspect or modify the referred object.
type ObjectReference struct {
	// Kind of the referent.
	Kind *string `json:"kind,omitempty"`
	// Namespace of the referent.
	Namespace *string `json:"namespace,omitempty"`
	// Name of the referent.
	Name *string `json:"name,omitempty"`
}

// An owner of a Kubernetes resource.
type Owner struct {
	// The owner.
	Resource KubernetesResource `json:"resource"`
	// Whether the owner is the controller of the owned Kubernetes resource.
	Controller *bool `json:"controller,omitempty"`
}

// An OwnerConnection represents a connection to an owner.
type OwnerConnection struct {
	// Connected nodes.
	Nodes []Owner `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// A Patch that should be applied to an unstructured input before it is submitted.
type Patch struct {
	// A field path references a field within a Kubernetes object via a simple
	// string. API conventions describe the syntax as "standard JavaScript syntax for
	// accessing that field, assuming the JSON object was transformed into a
	// JavaScript object, without the leading dot, such as metadata.name".
	//
	// Valid examples:
	//
	// * metadata.name
	// * spec.containers[0].name
	// * data[.config.yml]
	// * metadata.annotations['crossplane.io/external-name']
	// * spec.items[0][8]
	// * apiVersion
	// * [42]
	//
	// Invalid examples:
	//
	// * .metadata.name - Leading period.
	// * metadata..name - Double period.
	// * metadata.name. - Trailing period.
	// * spec.containers[] - Empty brackets.
	// * spec.containers.[0].name - Period before open bracket.
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	FieldPath string `json:"fieldPath"`
	// Unstructured JSON to be patched in at the suppled field path. This could be a
	// string, an object, or any other valid JSON.
	Unstructured []byte `json:"unstructured"`
}

// A PolicyRule holds information that describes a KubernetesRBAC policy rule.
type PolicyRule struct {
	// Verbs is a list of verbs that apply to ALL the resources specified by this
	// rule. '*' represents all verbs.
	Verbs []string `json:"verbs"`
	// APIGroups is the name of the APIGroup that contains the resources. If multiple
	// API groups are specified, any action requested against one of the enumerated
	// resources in any API group will be allowed.
	APIGroups []string `json:"apiGroups,omitempty"`
	// Resources is a list of resources this rule applies to. '*' represents all
	// resources.
	Resources []string `json:"resources,omitempty"`
	// ResourceNames is a list of names that the rule applies to. An empty set means
	// that everything is allowed.
	ResourceNames []string `json:"resourceNames,omitempty"`
	// NonResourceURLs is a set of partial urls that a user should have access to.
	// '*' is allowed, but only as the full, final step in the path. Rules can either
	// apply to API resources (such as "pods" or "secrets") or non-resource URL paths
	// (such as "/api"),  but not both.
	NonResourceURLs []string `json:"nonResourceURLs,omitempty"`
}

// A Provider extends Crossplane with support for new managed resources.
type Provider struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec ProviderSpec `json:"spec"`
	// The observed state of this resource.
	Status *ProviderStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
	// Revisions of this provider.
	Revisions ProviderRevisionConnection `json:"revisions"`
	// The active revision of this provider.
	ActiveRevision *ProviderRevision `json:"activeRevision,omitempty"`
}

func (Provider) IsNode() {}

func (Provider) IsKubernetesResource() {}

// A ProviderConfig configures a provider, in that it provides configuration that
// is relevant to all managed resources installed by a provider.
type ProviderConfig struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The observed state of this resource.
	Status *ProviderConfigStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
	// The definition of this resource.
	Definition ProviderConfigDefinition `json:"definition,omitempty"`
}

func (ProviderConfig) IsNode() {}

func (ProviderConfig) IsKubernetesResource() {}

// A reference to the ProviderConfig used by a particular managed resource.
type ProviderConfigReference struct {
	// Name of the provider config.
	Name string `json:"name"`
}

// A ProviderConfigStatus represents the observed state of a provider config.
type ProviderConfigStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
	// The number of managed resources currently using this provider config.
	Users *int `json:"users,omitempty"`
}

func (ProviderConfigStatus) IsConditionedStatus() {}

// A ProviderConnection represents a connection to providers.
type ProviderConnection struct {
	// Connected nodes.
	Nodes []Provider `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// A ProviderRevision represents a revision or 'version' of a provider.
type ProviderRevision struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// The desired state of this resource.
	Spec ProviderRevisionSpec `json:"spec"`
	// The observed state of this resource.
	Status *ProviderRevisionStatus `json:"status,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
}

func (ProviderRevision) IsNode() {}

func (ProviderRevision) IsKubernetesResource() {}

// A ProviderRevisionConnection represents a connection to provider revisions.
type ProviderRevisionConnection struct {
	// Connected nodes.
	Nodes []ProviderRevision `json:"nodes,omitempty"`
	// The total number of connected nodes.
	TotalCount int `json:"totalCount"`
}

// A ProviderRevisionSpec represents the desired state of a provider revision.
type ProviderRevisionSpec struct {
	// Desired state of the provider revision.
	DesiredState PackageRevisionDesiredState `json:"desiredState"`
	// Package image used by the install pod to extract package contents.
	Package string `json:"package"`
	// PackagePullPolicy defines the pull policy for the package. It is also applied
	// to any images pulled for the package, such as a provider's controller image.
	PackagePullPolicy *PackagePullPolicy `json:"packagePullPolicy,omitempty"`
	// Revision number. Indicates when the revision will be garbage collected based
	// on the configuration's RevisionHistoryLimit.
	Revision int `json:"revision"`
	// IgnoreCrossplaneConstraints indicates to the package manager whether to honor
	// Crossplane version constrains specified by the package.
	IgnoreCrossplaneConstraints *bool `json:"ignoreCrossplaneConstraints,omitempty"`
	// SkipDependencyResolution indicates to the package manager whether to skip
	// resolving dependencies for a package.
	SkipDependencyResolution *bool `json:"skipDependencyResolution,omitempty"`
}

// A ProviderRevisionStatus represents the observed state of a provider revision.
type ProviderRevisionStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
	// The number of known dependencies.
	FoundDependencies *int `json:"foundDependencies,omitempty"`
	// The number of installed dependencies.
	InstalledDependencies *int `json:"installedDependencies,omitempty"`
	// The number of invalid dependencies.
	InvalidDependencies *int `json:"invalidDependencies,omitempty"`
	// Permissions requested by this configuration revision.
	PermissionRequests []PolicyRule `json:"permissionRequests,omitempty"`
	// Objects owned by this provider revision - i.e. objects that were created by
	// this provider revision or that would have been created if they did not already
	// exist.
	//
	// In practice these objects are currently always a CustomResourceDefinition.
	// Crossplane lints the content of provider packages to enforce this, but it's
	// not enforced at the Kubernetes API level. We return an array of
	// KubernetesResource here because doing so allows us to package different types
	// in future without a breaking GraphQL schema change.
	Objects    KubernetesResourceConnection `json:"objects"`
	ObjectRefs []v1.TypedReference          `json:"-"`
}

func (ProviderRevisionStatus) IsConditionedStatus() {}

// A ProviderSpec represents the desired state of a provider.
type ProviderSpec struct {
	// The name of the provider package to pull from an OCI registry.
	Package string `json:"package"`
	// RevisionActivationPolicy specifies how the package controller should update
	// from one revision to the next.
	RevisionActivationPolicy *RevisionActivationPolicy `json:"revisionActivationPolicy,omitempty"`
	// RevisionHistoryLimit dictates how the package controller cleans up old
	// inactive package revisions. Defaults to 1. Can be disabled by explicitly
	// setting to 0.
	RevisionHistoryLimit *int `json:"revisionHistoryLimit,omitempty"`
	// PackagePullPolicy defines the pull policy for the package.
	PackagePullPolicy *PackagePullPolicy `json:"packagePullPolicy,omitempty"`
	// IgnoreCrossplaneConstraints indicates to the package manager whether to honor
	// Crossplane version constraints specified by the package.
	IgnoreCrossplaneConstraints *bool `json:"ignoreCrossplaneConstraints,omitempty"`
	// SkipDependencyResolution indicates to the package manager whether to skip
	// resolving dependencies for a package.
	SkipDependencyResolution *bool `json:"skipDependencyResolution,omitempty"`
}

// A ProviderStatus represents the observed state of a provider.
type ProviderStatus struct {
	// The observed condition of this resource.
	Conditions []Condition `json:"conditions,omitempty"`
	// CurrentRevision is the name of the current package revision. It will reflect
	// the most up to date revision, whether it has been activated or not.
	CurrentRevision *string `json:"currentRevision,omitempty"`
	// CurrentIdentifier is the most recent package source that was used to produce a
	// revision. The package manager uses this field to determine whether to check
	// for package updates for a given source when packagePullPolicy is set to
	// IfNotPresent.
	CurrentIdentifier *string `json:"currentIdentifier,omitempty"`
}

func (ProviderStatus) IsConditionedStatus() {}

// A Secret holds secret data.
type Secret struct {
	// An opaque identifier that is unique across all types.
	ID ReferenceID `json:"id"`
	// The underlying Kubernetes API version of this resource.
	APIVersion string `json:"apiVersion"`
	// The underlying Kubernetes API kind of this resource.
	Kind string `json:"kind"`
	// Metadata that is common to all Kubernetes API resources.
	Metadata ObjectMeta `json:"metadata"`
	// Type of this secret.
	Type *string `json:"type,omitempty"`
	// The data stored in this secret. Values are not base64 encoded.
	data map[string]string `json:"data,omitempty"`
	// An unstructured JSON representation of the underlying Kubernetes resource.
	SkipUnstructured `json:"unstructured"`
	// A JSON representation of a field within the underlying Kubernetes resource.
	//
	// API conventions describe the syntax as:
	// > standard JavaScript syntax for accessing that field, assuming the JSON
	// > object was transformed into a JavaScript object, without the leading dot,
	// > such as `metadata.name`.
	//
	// Valid examples:
	//
	// * `metadata.name`
	// * `spec.containers[0].name`
	// * `data[.config.yml]`
	// * `metadata.annotations['crossplane.io/external-name']`
	// * `spec.items[0][8]`
	// * `apiVersion`
	// * `[42]`
	// * `spec.containers[*].args[*]` - Supports wildcard expansion.
	//
	// Invalid examples:
	//
	// * `.metadata.name` - Leading period.
	// * `metadata..name` - Double period.
	// * `metadata.name.` - Trailing period.
	// * `spec.containers[]` - Empty brackets.
	// * `spec.containers.[0].name` - Period before open bracket.
	//
	// Wildcards support:
	//
	// For an object with the following data:
	//
	// ```json
	// {
	//   "spec": {
	//     "containers": [
	//       {
	//         "name": "cool",
	//         "image": "latest",
	//         "args": [
	//           "start",
	//           "now",
	//           "debug"
	//         ]
	//       }
	//     ]
	//   }
	// }
	// ```
	//
	// The wildcard `spec.containers[*].args[*]` will be expanded to:
	//
	// ```json
	// [
	//   "spec.containers[0].args[0]",
	//   "spec.containers[0].args[1]",
	//   "spec.containers[0].args[2]",
	// ]
	// ```
	//
	// And the following result will be returned:
	//
	// ```json
	// [
	//   "start",
	//   "now",
	//   "debug"
	// ]
	// ```
	//
	// https://github.com/kubernetes/community/blob/61f3d0/contributors/devel/sig-architecture/api-conventions.md#selecting-fields
	PavedAccess `json:"fieldPath"`
	// Events pertaining to this resource.
	Events EventConnection `json:"events"`
}

func (Secret) IsNode() {}

func (Secret) IsKubernetesResource() {}

// A `SecretReference` is a reference to a secret in an arbitrary namespace.
type SecretReference struct {
	// Name of the `Secret`.
	Name string `json:"name"`
	// Namespace of the `Secret`.
	Namespace string `json:"namespace"`
}

// A TypeReference references a type of Kubernetes resource by API version and
// kind.
type TypeReference struct {
	// The Kubernetes API version of the referenced resource.
	APIVersion string `json:"apiVersion"`
	// The Kubernetes API kind of the referenced resource.
	Kind string `json:"kind"`
}

// UpdateKubernetesResourceInput is the input required to update a Kubernetes
// resource.
type UpdateKubernetesResourceInput struct {
	// The Kubernetes resource to be updated, as raw JSON.
	Unstructured []byte `json:"unstructured"`
	// Patches that should be applied to the Kubernetes resource before updating.
	Patches []Patch `json:"patches,omitempty"`
}

// UpdateKubernetesResourcePayload is the result of updating a Kubernetes resource.
type UpdateKubernetesResourcePayload struct {
	// The updated Kubernetes resource. Null if the update failed.
	Resource KubernetesResource `json:"resource,omitempty"`
}

// A ConditionStatus represensts the status of a condition.
type ConditionStatus string

const (
	// The status of the condition is unknown.
	ConditionStatusUnknown ConditionStatus = "UNKNOWN"
	// The condition is false.
	ConditionStatusFalse ConditionStatus = "FALSE"
	// The condition is true.
	ConditionStatusTrue ConditionStatus = "TRUE"
)

var AllConditionStatus = []ConditionStatus{
	ConditionStatusUnknown,
	ConditionStatusFalse,
	ConditionStatusTrue,
}

func (e ConditionStatus) IsValid() bool {
	switch e {
	case ConditionStatusUnknown, ConditionStatusFalse, ConditionStatusTrue:
		return true
	}
	return false
}

func (e ConditionStatus) String() string {
	return string(e)
}

func (e *ConditionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ConditionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ConditionStatus", str)
	}
	return nil
}

func (e ConditionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A DeletionPolicy specifies what will happen to the underlying external resource
// when this managed resource is deleted - either "Delete" or "Orphan" the external
// resource.
type DeletionPolicy string

const (
	// Delete the resource from the external system when the managed resource is
	// deleted.
	DeletionPolicyDelete DeletionPolicy = "DELETE"
	// Leave the resource in the external system when the managed resource is
	// deleted.
	DeletionPolicyOrphan DeletionPolicy = "ORPHAN"
)

var AllDeletionPolicy = []DeletionPolicy{
	DeletionPolicyDelete,
	DeletionPolicyOrphan,
}

func (e DeletionPolicy) IsValid() bool {
	switch e {
	case DeletionPolicyDelete, DeletionPolicyOrphan:
		return true
	}
	return false
}

func (e DeletionPolicy) String() string {
	return string(e)
}

func (e *DeletionPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletionPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletionPolicy", str)
	}
	return nil
}

func (e DeletionPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// An EventType indicates the type of an event.
type EventType string

const (
	// A normal, informational event.
	EventTypeNormal EventType = "NORMAL"
	// A warning that something suboptimal has occurred.
	EventTypeWarning EventType = "WARNING"
)

var AllEventType = []EventType{
	EventTypeNormal,
	EventTypeWarning,
}

func (e EventType) IsValid() bool {
	switch e {
	case EventTypeNormal, EventTypeWarning:
		return true
	}
	return false
}

func (e EventType) String() string {
	return string(e)
}

func (e *EventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventType", str)
	}
	return nil
}

func (e EventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A PackagePullPolicy represents when to pull a package OCI image from a registry.
type PackagePullPolicy string

const (
	// Always pull the package image, even if it is already present.
	PackagePullPolicyAlways PackagePullPolicy = "ALWAYS"
	// Never pull the package image.
	PackagePullPolicyNever PackagePullPolicy = "NEVER"
	// Only pull the package image if it is not present.
	PackagePullPolicyIfNotPresent PackagePullPolicy = "IF_NOT_PRESENT"
)

var AllPackagePullPolicy = []PackagePullPolicy{
	PackagePullPolicyAlways,
	PackagePullPolicyNever,
	PackagePullPolicyIfNotPresent,
}

func (e PackagePullPolicy) IsValid() bool {
	switch e {
	case PackagePullPolicyAlways, PackagePullPolicyNever, PackagePullPolicyIfNotPresent:
		return true
	}
	return false
}

func (e PackagePullPolicy) String() string {
	return string(e)
}

func (e *PackagePullPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackagePullPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackagePullPolicy", str)
	}
	return nil
}

func (e PackagePullPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A PackageRevisionDesiredState represents the desired state of a provider or
// configuration revision.
type PackageRevisionDesiredState string

const (
	// The revision should be inactive.
	PackageRevisionDesiredStateInactive PackageRevisionDesiredState = "INACTIVE"
	// The revision should be active.
	PackageRevisionDesiredStateActive PackageRevisionDesiredState = "ACTIVE"
)

var AllPackageRevisionDesiredState = []PackageRevisionDesiredState{
	PackageRevisionDesiredStateInactive,
	PackageRevisionDesiredStateActive,
}

func (e PackageRevisionDesiredState) IsValid() bool {
	switch e {
	case PackageRevisionDesiredStateInactive, PackageRevisionDesiredStateActive:
		return true
	}
	return false
}

func (e PackageRevisionDesiredState) String() string {
	return string(e)
}

func (e *PackageRevisionDesiredState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PackageRevisionDesiredState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PackageRevisionDesiredState", str)
	}
	return nil
}

func (e PackageRevisionDesiredState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// ResourceScope defines the scopes available to custom resources.
type ResourceScope string

const (
	// Cluster scoped resources exist outside any namespace. The combination of their
	// API version, kind, and name must be unique within a cluster.
	ResourceScopeClusterScoped ResourceScope = "CLUSTER_SCOPED"
	// Namespace scoped resources exist within a particular namespace. The
	// combination of their API version, kind, and name must be unique only within
	// their namespace.
	ResourceScopeNamespaceScoped ResourceScope = "NAMESPACE_SCOPED"
)

var AllResourceScope = []ResourceScope{
	ResourceScopeClusterScoped,
	ResourceScopeNamespaceScoped,
}

func (e ResourceScope) IsValid() bool {
	switch e {
	case ResourceScopeClusterScoped, ResourceScopeNamespaceScoped:
		return true
	}
	return false
}

func (e ResourceScope) String() string {
	return string(e)
}

func (e *ResourceScope) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResourceScope(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResourceScope", str)
	}
	return nil
}

func (e ResourceScope) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// A RevisionActivationPolicy indicates how a provider or configuration package
// should activate its revisions.
type RevisionActivationPolicy string

const (
	// Automatically activate package revisions.
	RevisionActivationPolicyAutomatic RevisionActivationPolicy = "AUTOMATIC"
	// Require a user to manually activate revisions.
	RevisionActivationPolicyManual RevisionActivationPolicy = "MANUAL"
)

var AllRevisionActivationPolicy = []RevisionActivationPolicy{
	RevisionActivationPolicyAutomatic,
	RevisionActivationPolicyManual,
}

func (e RevisionActivationPolicy) IsValid() bool {
	switch e {
	case RevisionActivationPolicyAutomatic, RevisionActivationPolicyManual:
		return true
	}
	return false
}

func (e RevisionActivationPolicy) String() string {
	return string(e)
}

func (e *RevisionActivationPolicy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RevisionActivationPolicy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RevisionActivationPolicy", str)
	}
	return nil
}

func (e RevisionActivationPolicy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
